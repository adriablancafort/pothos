// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`subGraphs > Private graph 1`] = `
"interface Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

type CharacterFriendsConnection {
  edges: [CharacterFriendsConnectionEdge]!
  pageInfo: PageInfo!
}

type CharacterFriendsConnectionEdge {
  cursor: String!
  node: Character!
}

input DeprecatedInput {
  id: ID! @deprecated(reason: "its deprecated")
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!

  """The primary function of the droid."""
  primaryFunction(
    filter: FunctionFilter

    """The language to use for localization."""
    language: String
  ): String!
}

"""One of the films in the Star Wars Trilogy"""
enum Episode {
  """Released in 1980."""
  EMPIRE

  """Released in 1983"""
  JEDI

  """Released in 1977."""
  NEWHOPE
}

type Error {
  message: String!
}

input FunctionFilter {
  private: Boolean
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

interface Node {
  id: ID!
}

interface Node2 implements Node {
  id: ID!
}

type NodeThing implements Node2 {
  id: ID!
  name: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid!
  hero(
    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    episode: Episode!

    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    whatEpisode: DeprecatedInput @deprecated(reason: "Use \`episode\` instead.")
  ): QueryHeroResult!
  human(
    """id of the character"""
    id: ID!
  ): Human! @deprecated(reason: "Use \`hero\` instead.")
  node: Node
}

union QueryHeroResult = Error | QueryHeroSuccess

type QueryHeroSuccess {
  data: Character!
}"
`;

exports[`subGraphs > Public graph 1`] = `
"interface Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The name of the character"""
  name: String!
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The name of the character"""
  name: String!

  """The primary function of the droid."""
  primaryFunction(filter: FunctionFilter): String!
}

input FunctionFilter {
  public: Boolean
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The name of the character"""
  name: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid!
  human(
    """id of the character"""
    id: ID!
  ): Human! @deprecated(reason: "Use \`hero\` instead.")
  r2d2: Droid!
}"
`;

exports[`subGraphs > all 1`] = `
"interface Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The name of the character"""
  name: String!
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The name of the character"""
  name: String!

  """The primary function of the droid."""
  primaryFunction(filter: FunctionFilter): String!
}

input FunctionFilter

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The name of the character"""
  name: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid!
  human(
    """id of the character"""
    id: ID!
  ): Human! @deprecated(reason: "Use \`hero\` instead.")
}"
`;

exports[`subGraphs > full graph 1`] = `
"interface Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]!

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

type CharacterFriendsConnection {
  edges: [CharacterFriendsConnectionEdge]!
  pageInfo: PageInfo!
}

type CharacterFriendsConnectionEdge {
  cursor: String!
  node: Character!
}

input DeprecatedInput {
  id: ID! @deprecated(reason: "its deprecated")
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]!

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!

  """The primary function of the droid."""
  primaryFunction(
    filter: FunctionFilter

    """The language to use for localization."""
    language: String
  ): String!
}

"""One of the films in the Star Wars Trilogy"""
enum Episode {
  """Released in 1980."""
  EMPIRE

  """Released in 1983"""
  JEDI

  """Released in 1977."""
  NEWHOPE
}

type Error {
  message: String!
}

input FunctionFilter {
  private: Boolean
  public: Boolean
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode!]!

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

interface Node {
  id: ID!
}

interface Node2 implements Node {
  id: ID!
}

type NodeThing implements Node2 {
  id: ID!
  name: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid!
  hero(
    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    episode: Episode!

    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    whatEpisode: DeprecatedInput @deprecated(reason: "Use \`episode\` instead.")
  ): QueryHeroResult!
  human(
    """id of the character"""
    id: ID!
  ): Human! @deprecated(reason: "Use \`hero\` instead.")
  node: Node
  r2d2: Droid!
}

union QueryHeroResult = Error | QueryHeroSuccess

type QueryHeroSuccess {
  data: Character!
}"
`;

exports[`subGraphs > multiple 1`] = `
"interface Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

type CharacterFriendsConnection {
  edges: [CharacterFriendsConnectionEdge]!
  pageInfo: PageInfo!
}

type CharacterFriendsConnectionEdge {
  cursor: String!
  node: Character!
}

input DeprecatedInput {
  id: ID! @deprecated(reason: "its deprecated")
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!

  """The primary function of the droid."""
  primaryFunction(
    filter: FunctionFilter

    """The language to use for localization."""
    language: String
  ): String!
}

"""One of the films in the Star Wars Trilogy"""
enum Episode {
  """Released in 1980."""
  EMPIRE

  """Released in 1983"""
  JEDI

  """Released in 1977."""
  NEWHOPE
}

type Error {
  message: String!
}

input FunctionFilter {
  private: Boolean
  public: Boolean
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """The friends of the character, or an empty list if they have none."""
  friends: [Character]!
  friendsConnection(after: String, before: String, deprecatedInput: DeprecatedInput @deprecated(reason: "not a real input"), first: Int, last: Int): CharacterFriendsConnection!

  """The home planet of the human, or null if unknown."""
  homePlanet: String

  """The id of the character"""
  id: ID!

  """The name of the character"""
  name: String!
}

interface Node {
  id: ID!
}

interface Node2 implements Node {
  id: ID!
}

type NodeThing implements Node2 {
  id: ID!
  name: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  droid(
    """id of the character"""
    id: ID!
  ): Droid!
  hero(
    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    episode: Episode!

    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    whatEpisode: DeprecatedInput @deprecated(reason: "Use \`episode\` instead.")
  ): QueryHeroResult!
  human(
    """id of the character"""
    id: ID!
  ): Human! @deprecated(reason: "Use \`hero\` instead.")
  node: Node
  r2d2: Droid!
}

union QueryHeroResult = Error | QueryHeroSuccess

type QueryHeroSuccess {
  data: Character!
}"
`;
