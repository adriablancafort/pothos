"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean! = true

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Admin implements Node {
  id: ID!
  isAdmin: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Error {
  message: String
  stack: String
}

type Mutation {
  commentOnPost(input: MutationCommentOnPostInput!): comments
  createPost(input: MutationCreatePostInput!): Post
  likePost(postId: ID!): Post
  publishPost(postId: ID!): Post
}

input MutationCommentOnPostInput {
  postId: ID!
  text: String!
}

input MutationCreatePostInput {
  category: String!
  content: String!
  published: Boolean
  title: String!
}

interface Node {
  id: ID!
}

type NormalViewer implements Viewer {
  comments(after: String, before: String, first: Int, last: Int): ViewerCommentsConnection
  drafts: [Post!]
  drizzleConnectionComments(after: String, before: String, first: Int, last: Int): ViewerDrizzleConnectionCommentsConnection
  firstName: String
  hasId: Boolean
  id: ID
  isNormal: Boolean
  roles: [String!]
  rolesConnection(after: String, before: String, first: Int, invert: Boolean = false, last: Int): ViewerRolesConnection
  selfConnection(after: String, before: String, first: Int, last: Int): ViewerSelfConnection
  selfList: [Viewer!]
  user: User!
  username: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User
  category: String
  comments: [comments!]
  content: String
  createdAt: DateTime
  id: ID
  likes: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

type Query {
  admin: Admin
  me: Viewer
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  post(id: ID!): Post
  postWithErrors(id: ID!): QueryPostWithErrorsResult
  posts(after: String, before: String, category: String, first: Int, invert: Boolean, last: Int, sortByCategory: Boolean): QueryPostsConnection
  user(id: ID!): User
  userRolesConnection(after: String, before: String, first: Int, last: Int, userId: Int!): QueryUserRolesConnection
  userWithInput(input: QueryUserWithInputInput!): User
  users: [User!]
  usersConnection(after: String, before: String, first: Int, last: Int): QueryUsersConnection
}

union QueryPostWithErrorsResult = Error | QueryPostWithErrorsSuccess

type QueryPostWithErrorsSuccess {
  data: Post!
}

type QueryPostsConnection {
  edges: [QueryPostsConnectionEdge]
  pageInfo: PageInfo!
}

type QueryPostsConnectionEdge {
  cursor: String!
  node: Post
}

type QueryUserRolesConnection {
  edges: [QueryUserRolesConnectionEdge]
  pageInfo: PageInfo!
}

type QueryUserRolesConnectionEdge {
  cursor: String!
  node: Role
}

input QueryUserWithInputInput {
  id: ID!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User
}

type Role {
  id: ID
  name: String
}

type User implements Node {
  bio: String
  email: String
  firstName: String
  fullName: String
  id: ID!
  isAdmin: Boolean!
  lastName: String
  posts(limit: Int, offset: Int): [Post!]
  postsConnection(after: String, before: String, category: String, first: Int, invert: Boolean, last: Int, sortByCategory: Boolean): UserPostsConnection
  unOrderedPostsConnection(after: String, before: String, first: Int, last: Int): UserUnOrderedPostsConnection
  viewer: Viewer
}

type UserPostsConnection {
  edges: [UserPostsConnectionEdge]
  pageInfo: PageInfo!
}

type UserPostsConnectionEdge {
  cursor: String!
  node: Post
}

type UserUnOrderedPostsConnection {
  edges: [UserUnOrderedPostsConnectionEdge]
  pageInfo: PageInfo!
}

type UserUnOrderedPostsConnectionEdge {
  cursor: String!
  node: Post
}

interface Viewer {
  comments(after: String, before: String, first: Int, last: Int): ViewerCommentsConnection
  drafts: [Post!]
  drizzleConnectionComments(after: String, before: String, first: Int, last: Int): ViewerDrizzleConnectionCommentsConnection
  id: ID
  roles: [String!]
  rolesConnection(after: String, before: String, first: Int, invert: Boolean = false, last: Int): ViewerRolesConnection
  selfConnection(after: String, before: String, first: Int, last: Int): ViewerSelfConnection
  selfList: [Viewer!]
  user: User!
  username: String
}

type ViewerCommentsConnection {
  edges: [ViewerCommentsConnectionEdge]
  pageInfo: PageInfo!
  total: Int
}

type ViewerCommentsConnectionEdge {
  cursor: String!
  node: comments
}

type ViewerDrizzleConnectionCommentsConnection {
  edges: [ViewerDrizzleConnectionCommentsConnectionEdge]
  pageInfo: PageInfo!
  total: Int
}

type ViewerDrizzleConnectionCommentsConnectionEdge {
  cursor: String!
  node: comments
}

type ViewerRolesConnection {
  edges: [ViewerRolesConnectionEdge]
  pageInfo: PageInfo!
}

type ViewerRolesConnectionEdge {
  cursor: String!
  node: Role
}

type ViewerSelfConnection {
  edges: [ViewerSelfConnectionEdge]
  pageInfo: PageInfo!
}

type ViewerSelfConnectionEdge {
  cursor: String!
  node: Viewer
}

type comments {
  author: User
  id: ID
  post: Post
  text: String
}